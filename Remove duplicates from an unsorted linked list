// Approach 1 : Traverse whole linked list for each element . TC=O(N^2)  SC=O(1)

// Approach 2 : Sort the LL and remoev the duplicates . TC=O(NlogN)  SC=O(1) 

// Approach 3 : using map . TC=O(N) SC=O(N)


class Solution
{
    public:
    //Function to remove duplicates from unsorted linked list.
    Node * removeDuplicates( Node *head) 
    {
     // your code goes here
        unordered_map<int, int> map;
        Node *p = head;
        Node *prev = NULL;
        
        while (p != NULL)
        {
            if (map[p->data] > 0)
            {
                prev->next = p->next;
                Node *temp = p;
                p = p->next;
                delete temp;
            }
            else
            {
                map[p->data]++;
                prev = p;
                p = p->next;
            }
        }
        return head;
    }
};
